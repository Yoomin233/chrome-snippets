[{"id":"1","name":"ifFloatEqual","content":"const ifEqual = (num1, num2, num3) => num1 + num2 - num3 < Number.EPSILON"},{"id":"2","name":"myPromise","content":"var Promise2 = function (func) {\n    this.status = 'unfulfilled'\n    this.promiseValue = null\n    const myResolve = data => {\n        this.status = 'resolved'\n        this.promiseValue = data\n        if (this.thenResolve) {\n            this.thenResolve(data)\n            delete this.thenResolve\n        }\n    }\n    const myReject = err => {\n        this.status = 'rejected'\n        this.thenReject(null)\n    }\n    func(myResolve, myReject)\n    return this\n}\n\nPromise2.prototype.then = function (resolve, reject) {\n    // if already resolved, resolve immediately\n    if (this.status === 'resolved') {\n        this.promiseValue = resolve(this.promiseValue)\n    } else {\n    // else, pass the func in and wait for the internal 'resolve' call\n        this.thenResolve = resolve\n        this.thenReject = reject\n    }\n    return this\n}\n\nnew Promise2((resolve, reject) => {\n    setTimeout(() => resolve('this is data'), 1000)\n})\n.then(data => {\n    console.log(data)\n    return data\n})\n"},{"id":"3","name":"mockChalk","content":"var subSet = function(set) {\n    const res = []\n    for (let i = 1, l = set.length; i <= l; i++) {\n        for (let j = 0; j <= l - 1; j++) {\n            if (i === 1) {\n                res.push([set[j]])\n            }\n        }\n    }\n    return res\n}\nsubSet([1,2,3,4])"},{"id":"4","name":"directionReduction","content":"// https://www.codewars.com/kata/directions-reduction/train/javascript\nfunction dirReduc(arr){\n  if (!arr.length || arr.length === 1) return arr\n  const reducible1 = ['NORTH', 'SOUTH'], reducible2 = ['EAST', 'WEST']\n  return arr.slice(1).reduce((prev, next, index, arr) => {\n    let compared = [prev[prev.length - 1], next].sort()\n    if ((compared[0] === reducible1[0] && compared[1] === reducible1[1]) || (compared[0] === reducible2[0] && compared[1] === reducible2[1])) {\n      return prev.slice(0, prev.length - 1)\n    }\n    return prev.concat(next)\n  }, [arr[0]])\n}\ndirReduc([\"NORTH\", \"SOUTH\", \"SOUTH\", \"EAST\", \"WEST\", \"NORTH\", \"WEST\"])\n\n// good answers\nfunction dirReduc(arr) {\n  var str = arr.join(''), pattern = /NORTHSOUTH|EASTWEST|SOUTHNORTH|WESTEAST/;\n  while (pattern.test(str)) str = str.replace(pattern,'');\n  return str.match(/(NORTH|SOUTH|EAST|WEST)/g)||[];\n}\n\nfunction dirReduc(plan) {\n  var opposite = {\n    'NORTH': 'SOUTH', 'EAST': 'WEST', 'SOUTH': 'NORTH', 'WEST': 'EAST'};\n  return plan.reduce(function(dirs, dir){\n      if (dirs[dirs.length - 1] === opposite[dir])\n        dirs.pop();\n      else\n        dirs.push(dir);\n      return dirs;\n    }, []);\n}\n"},{"id":"5","name":"mergedStringChecker","content":"// https://www.codewars.com/kata/54c9fcad28ec4c6e680011aa/train/javascript\n\nfunction isMerge(s, part1, part2) {\n  if (part1.length + part2.length !== s.lengh) return false\n  function checkSequenceAndSubstr (s, subStr) {\n    let subStrArr = subStr.split('')\n    let lastIndex = -1\n    for (let i = 0; i < subStrArr.length; i++) {\n      let foundPos = s.indexOf(subStrArr[i])\n      if (!~foundPos) {\n          return false\n      }\n      if (lastIndex > foundPos) {\n          return false\n      }\n      lastIndex = foundPos\n      s = s.slice(1)\n    }\n    return true\n  }\n  return checkSequenceAndSubstr(s, part1) && checkSequenceAndSubstr(s, part2)\n}\n\nfunction checkSequenceAndSubstr (s, subStr) {\n  let subStrArr = subStr.split('')\n  let lastIndex = -1\n  for (let i = 0; i < subStrArr.length; i++) {\n    let foundPos = s.indexOf(subStrArr[i])\n    if (!~foundPos) {\n        return false\n    }\n    if (lastIndex > foundPos) {\n        return false\n    }\n    lastIndex = foundPos\n    s = s.slice(1)\n  }\n  return true\n}"},{"id":"6","name":"bestTravel","content":"// https://www.codewars.com/kata/best-travel/train/javascript\nvar fibonacci = (function() {\n    const cache = [0, 1]\n    return function recursion (n) {\n      if (cache[n] === undefined) cache[n] = recursion(n - 1) + recursion(n - 2)\n      return cache[n]\n    }\n})()"},{"id":"7","name":"formatTime","content":"var time = (date, strategy = [\n    // w/ in 24 hrs\n    {\n      range: [0, 86400000],\n      format: 'HH:mm'\n    },\n    // 24 - 48 hrs...and so on\n    {\n      range: [86400000 + 1, 86400000 * 2],\n      format: '昨天 HH:mm'\n    },\n    {\n      range: [86400000 * 2 + 1, 86400000 * 3],\n      format: '前天 HH:mm'\n    },\n    {\n      range: [86400000 * 3 + 1, Infinity],\n      format: 'MM-DD'\n    }\n  ]) => {\n    if (!date) return ''\n    date = typeof date === 'string' || typeof date === 'number' ? new Date(date) : date\n    let format\n    for (let [, v] of strategy.entries()) {\n      if (Math.max(...v.range) > Date.now() - date) {\n          format = v.format\n          break\n      }\n    }\n    \n    return format\n  }"},{"id":"10","name":"asyncWait","content":"async function main() {\n    console.log('start')\n    await waitForSeconds(3)\n    console.log('end')\n}\n\nfunction waitForSeconds(seconds) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(), seconds * 1e3)\n  })\n}\n\nmain()"},{"id":"12","name":"classes","content":"class pandora {\n    static new(name) {\n        return new this(name)\n    }\n    constructor(name) {\n        this.name = name\n    }\n    process (name) {\n        this.name = name\n        return this\n    }\n    scale(num) {\n        this.scale = num\n        return this\n    }\n}"},{"id":"13","name":"sort","content":"{\n    const arr = [5, 10, 2, 5, 3, 1, 8, 10, 4];\n    const bubbleSort = (arr)=>{\n        function swap(arr, i, j) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        const arrCopy = arr.slice();\n        for (let i = arrCopy.length - 1; i > 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (arrCopy[j] > arrCopy[j + 1]) {\n                    swap(arrCopy, j, j + 1);\n                }\n            }\n        }\n        return arrCopy;\n    }\n    //     bubbleSort(arr);\n    const selectionSort = (arr)=>{\n        function swap(arr, i, j) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        const arrCopy = arr.slice();\n        for (let i = 0; i < arrCopy.length - 1; i++) {\n            let index = i;\n            for (let j = i + 1; j <= arrCopy.length - 1; j++) {\n                if (arrCopy[index] > arrCopy[j]) {\n                    index = j;\n                }\n            }\n            swap(arrCopy, i, index);\n        }\n        return arrCopy;\n    }\n    selectionSort(arr);\n}\n"},{"id":"14","name":"maze","content":"var _1minSum = 0\nvar _1minArr = [-0.01, 0.28, 0.02, -0.07, 0.2, 0.08, 0.17, -0.16, -0.2, 0.1, -0.05, 0.03, 0, 0.01, 0, 0, 0.35, 0, 0.09, 0.04]\nfor (let i = _1minArr.length - 1 ; i >= 0; i--) {\n    const current = _1minArr[i]\n    if (current > 0) {\n        _1minSum += current\n    } else {\n        break;\n    }\n}\n"},{"id":"17","name":"login","content":"(async () => {\n    function waitSeconds(millSeconds) {\n        return new Promise(resolve => setTimeout(resolve, millSeconds))\n    }\n    async function triggerDragAndDrop (elemDrag, elemDrop) {\n\n  // function for triggering mouse events\n  var fireMouseEvent = function (type, elem, centerX, centerY) {\n    var evt = document.createEvent('MouseEvents');\n    evt.initMouseEvent(type, true, true, window, 1, 1, 1, centerX, centerY, false, false, false, false, 0, elem);\n    elem.dispatchEvent(evt);\n  };\n\n  // fetch target elements\n  if (!elemDrag || !elemDrop) {\n      console.log('elem not found!')\n      return\n    };\n\n  // calculate positions\n  var pos = elemDrag.getBoundingClientRect();\n  var center1X = Math.floor((pos.left + pos.right) / 2);\n  var center1Y = Math.floor((pos.top + pos.bottom) / 2);\n  pos = elemDrop.getBoundingClientRect();\n  var center2X = Math.floor(pos.right);\n  var center2Y = Math.floor((pos.top + pos.bottom) / 2);\n  \n  // mouse over dragged element and mousedown\n  fireMouseEvent('mousemove', elemDrag, center1X, center1Y);\n  fireMouseEvent('mouseenter', elemDrag, center1X, center1Y);\n  fireMouseEvent('mouseover', elemDrag, center1X, center1Y);\n  fireMouseEvent('mousedown', elemDrag, center1X, center1Y);\n\n  // start dragging process over to drop target\n  fireMouseEvent('dragstart', elemDrag, center1X, center1Y);\n  fireMouseEvent('drag', elemDrag, center1X, center1Y);\n  fireMouseEvent('mousemove', elemDrag, center1X, center1Y);\n  fireMouseEvent('drag', elemDrag, center2X, center2Y);\n  let destXPos = center2X\n  while (destXPos > 0) {\n    fireMouseEvent('mousemove', elemDrop, center2X - destXPos, center2Y - (Math.floor(Math.random() * 10)));\n    await waitSeconds(5)\n    destXPos = destXPos - (Math.floor(Math.random() * 10))\n  }\n  if (destXPos > 0) {\n      fireMouseEvent('mousemove', elemDrop, center2Xs, center2Y - (Math.floor(Math.random() * 10)));\n  }\n  // trigger dragging process on top of drop target\n  fireMouseEvent('mouseenter', elemDrop, center2X, center2Y);\n  fireMouseEvent('dragenter', elemDrop, center2X, center2Y);\n  fireMouseEvent('mouseover', elemDrop, center2X, center2Y);\n  fireMouseEvent('dragover', elemDrop, center2X, center2Y);\n  \n  // release dragged element on top of drop target\n  fireMouseEvent('drop', elemDrop, center2X, center2Y);\n  fireMouseEvent('dragend', elemDrag, center2X, center2Y);\n  fireMouseEvent('mouseup', elemDrag, center2X, center2Y);\n\n  return true;\n};\n    const $ = document.querySelector.bind(document)\n    const phoneNum = '15551202989'\nconst loginBtn = $('.login_phone > span')\nconst phoneForm = $('input#phone')\nloginBtn.click()\nawait waitSeconds(2000)\nconsole.log('fill phone num!')\nphoneForm.value = phoneNum\nconst sliderIndex = $('div#loginVerify').dataset.ncIdx\n// drag\ntriggerDragAndDrop($(`#nc_${sliderIndex}_n1z`), $(`#nc_${sliderIndex}__scale_text`))\nawait waitSeconds(1000)\n\n})()\n"},{"id":"18","name":"fib","content":"class SuperNum extends Number {\n    constructor (num) {\n        return super(num)\n    }\n    add (num) {\n        return new this.constructor(Number(this) + num)\n    }\n}"},{"id":"19","name":"getter&setter","content":"function Modal(elem, initVal) {\n    let val\n    if (initVal) {\n        val = initVal\n        elem.value = initVal\n    } else {\n        val = elem.value\n    }\n    elem.addEventListener('change', (e)=>val = e.target.value)\n    return new class {\n        get val() {\n            return val\n        }\n        set val(newVal) {\n            val = newVal\n            elem.value = newVal\n        }\n    }\n}\nvar c = new Modal(document.querySelector('input'),'3')\n"},{"id":"20","name":"prototype","content":"let cal\n{\n    const BaseCal = function() {\n        this.decimal = 2\n    }\n    BaseCal.prototype.add = function(x, y) {\n        return x + y\n    }\n    const Cal = function() {\n        this.tax = 2\n    }\n    Cal.prototype = new BaseCal()\n    Cal.prototype.hello = 'hell!'\n    Cal.prototype.constructor = Cal\n    cal = new Cal()\n//     console.log(cal)\n}\n"},{"id":"21","name":"fib recursive and memoization","content":"function fibWithoutMem (n) {\n    if (n < 2) {\n        return n\n    } else {\n        return fibWithoutMem(n - 1) + fibWithoutMem(n - 2)\n    }\n}\nthis.mem = {}\nfunction fibWithMem (n) {\n    if (mem[n]) {\n        return mem[n]\n    } else {\n        if (n < 2) {\n            return mem[n] = n\n        } else {\n            return mem[n] = fibWithMem(n - 1) + fibWithMem(n - 2)\n        }\n    }\n}\n{   \n    const n = 50\n    const start = performance.now()\n    console.log(fibWithoutMem(n))\n    const end1 = performance.now()\n    console.log(`timing of no mem: ${end1 - start}ms`)\n    const start2 = performance.now()\n    console.log(fibWithMem(n))\n    console.log(`timing of with mem: ${performance.now() - start2}ms`)\n}"},{"id":"22","name":"recursiveBubbleSort","content":"{\n    const arr = Array(3000).fill(null).map( _ => Math.random())\n    const bubbleSort = function(arr) {\n        if (arr.length <= 1) {\n            return arr\n        } else {\n            for (let i = 0; i < arr.length; i++) {\n                let current = arr[i]\n                let next = arr[i+1]\n                if (current > next) {\n                    arr[i] = next\n                    arr[i+1] = current\n                }\n            }\n            return bubbleSort(arr.slice(0, arr.length - 1)).concat(arr[arr.length - 1])\n        }\n\n    }\n    const start1 = performance.now()\n    console.log(bubbleSort(arr))\n    console.log(`bubble time: ${performance.now() - start1}ms`)\n    const start2 = performance.now()\n    console.log(arr.sort((a, b) => a - b))\n    console.log(`array.sort time: ${performance.now() - start2}ms`)\n}"},{"id":"23","name":"arrShuffle","content":"{\n    const arr = Array(30).fill().map((_, index) => index + 1)\n    for (let i = arr.length - 1; i >= 0; i--) {\n        let rand = Math.floor((i + 1) * Math.random())\n        console.log(rand)\n        [arr[rand], arr[i]] = [arr[i], arr[rand]]\n    }\n    console.log(arr)\n}"},{"id":"24","name":"tryCatchAsync","content":"async function func() {\n    try {\n        await Promise.reject({\n            code: 1,\n            message: 'error!'\n        })\n    } catch (e) {\n        console.log(e)\n    }\n}\n\nfunc()"},{"id":"25","name":"quickSort","content":"const testArr = Array.from({length: 100000}).map(_ => Math.floor(Math.random() * 100000))\nfunction quickSort(arr) {\n    if (arr.length < 2) {\n        return arr\n    }\n    const pivotIndex = Math.floor(arr.length / 2)\n    const pivot = arr.slice(pivotIndex, pivotIndex + 1)[0]\n//     const left = arr.filter(item => item < pivot)\n//     const right = arr.filter(item => item > pivot)\n    return quickSort(arr.filter(item => item < pivot)).concat([pivot], quickSort(arr.filter(item => item > pivot)))\n}\nconsole.time('quickSort')\nconsole.log(quickSort(testArr))\nconsole.timeEnd('quickSort')\nconsole.time('jsSort')\nconsole.log(testArr.sort((a, b) => a - b))\nconsole.timeEnd('jsSort')"},{"id":"26","name":"fetch","content":""},{"id":"27","name":"tail recursive","content":"function recur(n) {\n    if (n === 1) {\n        return n\n    } else {\n        return n + recur(n - 1)\n    }\n}\nfunction tailRecur(n, result) {\n    if (n === 1) {\n        return result\n    } else {\n        return tailRecur(n - 1, result + n)\n    }\n}\n"},{"id":"28","name":"binarySearch","content":"function binarySearch(target, arr, start = 0, end = arr.length - 1) {\n    const midIndex = ~~(start + (end - start) / 2)\n    const midNum = arr[midIndex]\n    if (start > end || start < 0) {\n        return -1\n    }\n    if (midNum === target) {\n        console.log('found!')\n         return midIndex\n    } else if (midNum > target) {\n        return binarySearch(target, arr, 0, midIndex - 1)\n    } else {\n        return binarySearch(target, arr, midIndex + 1, end)\n    }\n\n}\nfunction binarySearch2(target,arr,start,end) {\n    var start   = start || 0;\n    var end     = end || arr.length-1;\n\n    var mid = parseInt(start+(end-start)/2);\n    if(target==arr[mid]){\n        return mid;\n    }else if(target>arr[mid]){\n        return binarySearch2(target,arr,mid+1,end);\n    }else{\n        return binarySearch2(target,arr,start,mid-1);\n    }\n    return -1;\n}\nfunction binarySearch3(target, arr) {\n    let low = 0, high = arr.length - 1, middle\n    while (low <= high) {\n        middle = ~~((high + low) / 2)\n        if (target < arr[middle]) {\n            high = middle - 1\n        } else if (target > arr[middle]) {\n            low = middle + 1\n        } else {\n            return middle\n        }\n    }\n    return -1\n}"},{"id":"29","name":"reactMock-class","content":"class Component {\n    constructor(props) {\n        if (!props && this.constructor.defaultProps) {\n            this.props = this.constructor.defaultProps\n        } else {\n            this.props = props\n        }\n        \n    }\n    setState(newState) {\n        this.state = newState\n        this.render()\n    }\n}\n\nclass Component1 extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            count: this.props.count\n        }\n    }\n    add() {\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n    render() {\n        console.log(this.state)\n    }\n}\nComponent1.defaultProps = {\n    count: 5\n}\nvar component1 = new Component1()\n"},{"id":"31","name":"reactMock-function","content":"function Component() {\n//     console.log(this, props)\n    this.setState = function (newState) {\n        this.state = newState\n        this.render()\n    }\n}\n\nconst component = new Component()\n\nfunction Component1(props) {\n    Object.setPrototypeOf(this, component)\n    this.props = props || this.constructor.defaultProps\n    this.state = {\n        count: this.props.count\n    }\n    this.add = function () {\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n    this.render = function () {\n        console.log(this.state)\n    }\n}\nComponent1.defaultProps = {count: 4}\n\nconst component1 = new Component1()"},{"id":"32","name":"circleQuene","content":"// from 算法的乐趣 p5 - 环形队列\nconst CircleQuene = function() {\n    this.quene = []\n    this.tailPointer = -1\n    //     this.headPointer = 0\n    this.maxRecords = 10000\n    this.add = function(msg) {\n        this.tailPointer = (this.tailPointer + 1) % this.maxRecords\n        this.quene[this.tailPointer] = msg\n//         console.log(this.quene, this.tailPointer)\n\n    }\n    this.readTail = function(num) {\n        if (this.quene.length < this.maxRecords) {\n            return this.quene\n        } else {\n            return this.quene.slice(this.tailPointer, this.tailPointer + 1)\n        }\n    }\n}\nconst circleQuene1 = new CircleQuene()\n\nconst ArrQuene = function() {\n    this.quene = []\n    this.maxRecords = 10000\n    this.add = function(msg) {\n        if (this.quene.length >= this.maxRecords) {\n            this.quene.shift()\n        }\n        this.quene.push(msg)\n    }\n}\n\nconst arrQuene = new ArrQuene()\n\nconsole.time('circle')\nfor (let i = 0; i < 88888; i++) {\n    circleQuene1.add(i)\n}\nconsole.timeEnd('circle')\nconsole.log(circleQuene1)\nconsole.time('arr')\nfor (let i = 0; i < 88888; i++) {\n    arrQuene.add(i)\n}\nconsole.timeEnd('arr')\nconsole.log(arrQuene)\n"},{"id":"33","name":"arrRemoveDuplicates","content":"const arr = [1,1,2,3,4,5,6,7,8,9,9,10, 12, 12, 15, 15]\nconst removedArr = Array.from({length: Math.max.apply(Math, arr)})\narr.forEach(item => {\n    removedArr[item] = 1\n})\narr.reduce((prev, next) => next === prev[prev.length - 1] ? prev : prev.concat(next), [])"},{"id":"34","name":"chineseDigits","content":"{\n    const chnNumChar = ['另', '一', '二', '三', '四', '五', '六', '七', '吧', '就']\n    const chnNumUnits = ['十', '百', '千', '万', '亿']\n    function numToSections(num) {\n        const numStr = num.toString()\n        for (let i = numStr.length - 1; i >= 0; i--) {\n            console.log(numStr[i])\n            //             i--\n        }\n    }\n    numToSections('12345678')\n}\n"},{"id":"35","name":"arrayPerformance","content":"var arr = Array.from({length: 100}, item => Math.floor(Math.random() * 100));\n{\n    console.time('forLoop');\n    let arrLen = arr.length;\n    let sum = 0;\n    for (let i = 0; i < arrLen; i++) {\n        sum += arr[i];\n    }\n    console.timeEnd('forLoop');\n    console.log(sum);\n}\n{\n    console.time('reduce');\n    let arrLen = arr.length;\n    let sum = 0;\n    arr.reduce((prev, next) => {\n       sum += prev;\n       return next; \n    });\n    console.timeEnd('reduce');\n    console.log(sum + arr[arrLen - 1]);\n}"},{"id":"36","name":"eventListener","content":"function Listener(evtName) {\n    if (!evtName)\n        throw new Error('Must specify a event name!');\n    this.evtName = evtName;\n}\nListener.prototype.addEventListener = function(callback) {\n    if (!this.callBacks)\n        this.callBacks = [];\n    typeof callback === \"function\" && this.callBacks.push(callback);\n}\nListener.prototype.trigger = function() {\n    if (!this.callBacks || (this.callBacks && !this.callBacks.length))\n        return;\n    for (let i = 0; i < this.callBacks.length; i++) {\n        //         console.log(i);\n        const func = this.callBacks[i];\n        if (typeof func === 'function') {\n            func.apply(this, arguments)\n        }\n    }\n}\nListener.prototype.removeEventListner = function(evtName, func) {\n    if (!this.callBacks || (this.callBacks && !this.callBacks.length))\n        return;\n    let funcIndex = this.callBacks.indexOf(func)\n    if (funcIndex !== -1)\n        this.callBacks.splice(funcIndex, 1);\n}\nListener.prototype.removeAllListeners = function() {\n    this.callBacks = [];\n}\n"},{"id":"37","name":"bindPolyfill","content":"Function.prototype.bind2 = function (thisArg) {\n    let thisFunc = this;\n    return function () {\n        return thisFunc.apply(thisArg, arguments)\n    }\n}"},{"id":"38","name":"hijackingConsole","content":"{\n    let originConsole = console.log.bind(console);\n    console.log = function(...args) {\n        document.querySelector('div.console').innerText = args.join(' ');\n        originConsole(...args);\n    }\n}"},{"id":"39","name":"pushBoxConvert","content":"{\n    let wallsArr = [];\n    let vicPointsArr = [];\n    let crates = [];\n    [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 4, 2, 4, 1, 3, 0, 0, 0, 0, 3, 1, 2, 4, 2, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0].forEach((type, index) => {\n        const currentPos = [Math.floor(index / 12), index % 12]\n//         console.log(currentPos);\n        if (type === 1) vicPointsArr.push(currentPos);\n        if (type === 3) wallsArr.push(currentPos);\n        if (type === 4) crates.push(currentPos);\n    })\n    let wallsArrStr = wallsArr.toString().replace(/(\\d,\\d)/g, '[$1]');\n    let vicPointsArrStr = vicPointsArr.toString().replace(/(\\d,\\d)/g, '[$1]');\n    let cratesStr = crates.toString().replace(/(\\d,\\d)/g, '[$1]')\n    console.log(wallsArrStr, vicPointsArrStr, cratesStr);\n}"},{"id":"40","name":"mockVue","content":""},{"id":"41","name":"mergeArray","content":"function merge(arr1, arr2) {\n    const res = [];\n    let i1 = i2 = 0;\n    while (i1 < arr1.length && i2 < arr2.length) {\n        if (arr1[i1] < arr2[i2]) {\n            res.push(arr1[i1++])\n        } else {\n            res.push(arr2[i2++]);\n        }\n    }\n    return res;\n}"},{"id":"42","name":"addBigNumbers","content":"function add(num1, num2) {\n    let res = [];\n    let i1 = num1.length - 1\n      , i2 = num2.length - 1;\n    let plus = 0;\n    while (i1 >= 0 && i2 >= 0) {\n        let added = Number(num1[i1--]) + Number(num2[i2--]);\n        if (plus) {\n            added += plus--;\n//             plus = 0;\n        }\n        if (added > 9) {\n            //             res.unshift(added % 10);\n            plus = 1;\n        }\n        res.unshift(added % 10);\n    }\n    if (num1[i1] !== undefined) {\n        res.unshift(Number(num1.slice(0, i1 + 1)) + (plus ? plus : 0));\n        plus = 0;\n    } else if (num2[i2] !== undefined) {\n        res.unshift(Number(num2.slice(0, i2 + 1)) + (plus ? plus : 0));\n        plus = 0;\n    } else if (plus) {\n        res.unshift(plus);\n    }\n    //     if (plus) res.unshift(1);\\\n    return res.join('');\n}\n"},{"id":"43","name":"isPalindrome","content":"function isPalinedrome(str) {\n    if (str.length === 1 || !str) {\n        return true\n    } else if (str[0] === str[str.length - 1]) {\n        return isPalinedrome(str.slice(1, str.length - 1));\n    }\n    return false;\n}"},{"id":"44","name":"temp","content":"{\n    window.a = {\n        b: 'c'\n    }\n    const key = 'a.b'\n    const keyArr = key.split('.');\n\n    let res = keyArr.reduce((prev, next) => {\n        return prev[next]\n    }, window)\n    console.log(res)\n}"},{"id":"45","name":"bubbleSort","content":"{\n    let arr = [4, 2, 1, 5];\n    function bubbleSort(arr) {\n        for (let i = arr.length - 1; i > 0; i--) {\n            for (let k = i - 1; k >= 0; k--) {\n                if (arr[k + 1] < arr[k]) {\n                    [arr[k],arr[k + 1]] = [arr[k + 1], arr[k]]\n                }\n            }\n        }\n        return arr;\n    }\n    function whatSort(arr) {\n        for (let i = arr.length - 1; i > 0; i--) {\n            for (let k = i - 1; k >= 0; k--) {\n                if (arr[i] < arr[k]) {\n                    [arr[k],arr[i]] = [arr[i], arr[k]]\n                }\n            }\n        }\n        return arr;\n    }\n    function selectionSort(arr) {\n        for (let i = 0; i < arr.length; i++) {\n            let smallestIndex = i;\n            for (let k = i + 1; k < arr.length; k++) {\n                if (arr[k] < arr[smallestIndex]) {\n                    smallestIndex = k;\n                }\n            }\n            if (i !== smallestIndex) {\n                [arr[i], arr[smallestIndex]] = [arr[smallestIndex], arr[i]];\n            }\n        }\n        return arr;\n    }\n    function quickSort(arr) {\n        if (arr.length <= 1) {\n            return arr;\n        }\n        const [pivot] = arr.splice(Math.floor(arr.length / 2), 1);\n        const left = [], right = [];\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] < pivot) {\n                left.push(arr[i])\n            } else {\n                right.push(arr[i])\n            }\n        }\n        return quickSort(left).concat(pivot, quickSort(right))\n    }\n    function binarySearch(arr, target, start = 0, end = arr.length - 1) {\n        const n = Math.floor((start + end) / 2)\n        if (arr[n] === target) {\n            return n\n        } else if (arr[n] > target) {\n            return binarySearch(arr, target, start, n - 1)\n        } else {\n            return binarySearch(arr, target, n + 1, end)\n        }\n        return -1;\n    }\n    console.log(binarySearch([1,2,3,4,6], 6));\n}\n"},{"id":"46","name":"BinarySearchTree","content":"{\n    class BST {\n        constructor() {\n            this.root = null;\n        }\n        insert(data) {\n            if (!this.root) {\n                this.root = this.createNode(data, null, null)\n            } else {\n                let parent = this.root\n                while (true) {\n                    if (parent.data > data) {\n                        //                         parent = parent.left\n                        if (parent.left === null) {\n                            parent.left = this.createNode(data, null, null);\n                            break;\n                        } else {\n                            parent = parent.left\n                        }\n                    } else if (parent.data < data) {\n                        //                         parent = parent.right\n                        if (parent.right === null) {\n                            parent.right = this.createNode(data, null, null);\n                            break;\n                        } else {\n                            parent = parent.right\n                        }\n                    }\n                }\n\n            }\n        }\n        createNode(data, left, right) {\n            return ({\n                data,\n                left: left || null,\n                right: right || null\n            })\n        }\n    }\n    const bst = new BST();\n    bst.insert(50);\n    bst.insert(60);\n    bst.insert(40);\n    bst.insert(45);\n    bst.insert(80);\n    bst.insert(42);\n    console.log(bst);\n\n    // 遍历树\n    // 中序遍历(左根右)\n    function inOrder(node) {\n        if (node !== null) {\n            inOrder(node.left);\n            console.log(node.data);\n            inOrder(node.right);\n        }\n    }\n//     inOrder(bst.root)\n\n    // 二叉树查找\n    function getMin(bst) {\n        let current = bst.root\n        for (;current === null; current = current.left)\n        return current;\n\n    }\n    getMin(bst);\n}\n"},{"id":"47","name":"generatorExecutor","content":"// {\nfunction *gener() {\n    console.log(1);\n    const nex = yield new Promise(r => setTimeout(r, 100));\n    yield nex + 5;\n    console.log(nex);\n}\n//     console.log(gener())\n// }\n"},{"id":"48","name":"strRotate","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/01.01.md\n// 旋转字符串\nfunction LeftShiftOne(arr) {\n    const len = arr.length;\n    const first = arr[0];\n    for (let i = 1; i < len; i++) {\n        arr[i - 1] = arr[i];\n    }\n    arr[len - 1] = first;\n    return arr;\n}\nfunction leftRotateStr(arr, m) {\n    while (m--) {\n        LeftShiftOne(arr)\n    }\n    return arr\n}\n\nfunction reverseString(arr, from, to) {\n//     let from = 0, to = arr.length - 1;\n    while (from < to) {\n        [arr[from - 1], arr[to + 1]] = [arr[to--], arr[from++]]\n    }\n    return arr;\n}\nfunction leftRotateStr2 (arr, m) {\n    m %= arr.length\n    reverseString(arr, 0, m - 1);\n    reverseString(arr, m, arr.length - 1);\n    reverseString(arr, 0, arr.length - 1)\n    return arr;\n}"},{"id":"49","name":"stringContain","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/01.02.md\n// if string a contains string b\nfunction stringContain(a, b) {\n    for (let i = 0; i < a.length; i++) {\n        let j, k = i;\n        for (j = 0; j < b.length && a[k] === b[j]; j++, k++) {\n            \n        }\n        if (j >= b.length) {\n            return true\n        }\n    }\n    return false;\n}\n\n// 速度最快, 只能搜索单个字符\nfunction binStringContain(a, b)\n{\n    let hash = 0;\n    for (let i = 0; i < a.length; ++i)\n    {\n        // hash | ‘A' -> 0b0001, hash | 'B' -> 0b0011\n        hash |= (1 << (a[i].charCodeAt(0) - 'A'.charCodeAt(0)));\n    }\n    for (let i = 0; i < b.length; ++i)\n    {   \n        // hash & 'A' -> 0b0011 & 0b0001\n        if ((hash & (1 << (b[i].charCodeAt(0) - 'A'.charCodeAt(0)))) === 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}"},{"id":"50","name":"strToInt","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/01.03.md\nfunction strToInt(str) {\n    let n = 0;\n    for (let i = 0; i < str.length; i++) {\n        n *= 10;\n        n += Number(str[i]);\n    }\n    return n;\n}"},{"id":"51","name":"permutation","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/01.06.md\n// 字符串/数组全排列\nfunction callAllPermutation (arr, fromIndex) {\n    if (fromIndex === arr.length) {\n        return console.log('res' + arr)\n    }\n    for (let i = fromIndex; i < arr.length; i++) {\n        [arr[i], arr[fromIndex]] = [arr[fromIndex], arr[i]];\n        callAllPermutation(arr, fromIndex + 1);\n        console.log(arr, i, fromIndex);\n        [arr[fromIndex], arr[i]] = [arr[i], arr[fromIndex]];\n    }\n}"},{"id":"52","name":"smalletsInt","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/02.01.md\n// 输出n个整数中最小的k个\n{\n    function quickSort(arr) {\n        if (arr.length <= 1)\n            return arr\n        const [pivot] = arr.splice(Math.floor(arr.length) / 2, 1)\n        const left = []\n          , right = [];\n        for (let i = 0; i < arr.length; i++) {\n            //                     console.log('exec!')\n            if (arr[i] < pivot) {\n                left.push(arr[i])\n            } else {\n                right.push(arr[i])\n            }\n        }\n        return quickSort(left).concat(pivot, quickSort(right));\n    }\n    function getSmallestK(arr, k) {\n        arrCopy = arr.slice();\n        let smallStack = quickSort(arrCopy.splice(0, k));\n        //         return smallStack;\n        for (let i = 0; i < arrCopy.length; i++) {\n            if (arrCopy[i] < smallStack[smallStack.length - 1]) {\n                smallStack[smallStack.length - 1] = arrCopy[i];\n                smallStack = quickSort(smallStack)\n            }\n        }\n        return smallStack\n    }\n    console.log(getSmallestK([0, 5, 4, 3, 1, 10], 3))\n}\n"},{"id":"53","name":"twoSum&multipleSum","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/02.02.md\n// 寻找和为定值的两个数\n{\n    const inputArr = [1, 2, 4, 7, 11, 15]\n      , targetNum = 15;\n    // 暴力穷举法\n    function exhaustionMethod(arr, targetNum) {\n        for (let i = 0; i < arr.length - 1; i++) {\n            for (let k = i; k < arr.length; k++) {\n                if (arr[i] + arr[k] === targetNum) {\n                    console.log(i, k);\n                    return;\n                }\n            }\n        }\n    }\n\n    function binarySearch(arr, target, from=0, to=arr.length-1) {\n        //         const arrCopy = arr.slice();\n        //         while (from <= to) {\n        const index = Math.floor((from + to) / 2);\n        const median = arr[index];\n        if (median === target) {\n            return index;\n        } else if (median < target) {\n            return binarySearch(arr, target, index + 1, to);\n        } else {\n            return binarySearch(arr, target, from, index - 1);\n        }\n        //         }\n        return -1\n    }\n    \n    // 两端扫描法(输入数组已经经过排序)\n    function twoSum(arr, target) {\n        let start = 0, end = arr.length - 1;\n        while (start < end) {\n            const currentSum = arr[start] + arr[end]\n            if (currentSum === target) {\n                console.log(start, end);\n                break;\n            }  else {\n                if (currentSum < target) {\n                    start++\n                } else {\n                    end--\n                }\n            }\n        }\n    }\n    //     exhaustionMethod(inputArr, targetNum);\n//     console.log(binarySearch([1, 2, 3, 6, 8, 9, 10, 12, 15], 3))\n//     twoSum([1, 2, 4, 7, 10, 14, 18], 16)\n}\n{\n    // https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/02.03.md\n    // 寻找和为定值的多个数\n    \n}\n"},{"id":"54","name":"maxSubAr","content":"{\n    // https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/02.04.md\n    // 连续最大子数组和\n    function maxSubArr(arr) {\n        let maxVal = 0\n          , currentVal = 0\n          , maxPos = []\n          , currentPos = []\n        for (let i = 0; i < arr.length; i++) {\n            //             maxVal = arr[i] > maxVal ? arr[i] : maxVal\n            for (let j = i; j < arr.length; j++) {\n                for (let k = i; k <= j; k++) {\n                    currentVal += arr[k];\n                    currentPos.push(k);\n                }\n                if (currentVal > maxVal) {\n                    maxVal = currentVal;\n                    maxPos = currentPos;\n                }\n                currentVal = 0;\n                currentPos = [];\n            }\n        }\n        return [maxVal, maxPos]\n    }\n\n    // 事实上，当我们令currSum为当前最大子数组的和，maxSum为最后要返回的最大子数组的和，当我们往后扫描时，\n\n    // 对第j+1个元素有两种选择：要么放入前面找到的子数组，要么做为新子数组的第一个元素；\n    // 如果currSum加上当前元素a[j]后不小于a[j]，则令currSum加上a[j]，否则currSum重新赋值，置为下一个元素，即currSum = a[j]。\n    // 同时，当currSum > maxSum，则更新maxSum = currSum，否则保持原值，不更新。\n    function maxSubArr2(arr) {\n        let currentVal = 0\n          , maxSum = 0\n          , maxPos = [];\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > currentVal + arr[i]) {\n                currentVal = arr[i];\n                maxPos = [i];\n            } else {\n                currentVal += arr[i];\n\n            }\n            if (currentVal > maxSum) {\n                maxPos.push(i);\n                maxSum = currentVal;\n            }\n        }\n        return [maxSum, maxPos];\n    }\n    console.log(maxSubArr2([1, -2, 3, 10, -4, 7, 2, -5]))\n}\n"},{"id":"55","name":"oddEvenSort","content":"// https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/02.06.md\n// 奇偶调序\n{\n    function oddEvenSort(arr) {\n        let sortedIndex = 0;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] % 2 === 0) {\n                [arr[sortedIndex], arr[i]] = [arr[i], arr[sortedIndex]]\n                sortedIndex++\n            }\n        }\n        return arr\n    }\n    console.log(oddEvenSort([4, 1, 2, 3, 4, 7, 10, 5, 8]))\n}"}]